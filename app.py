import streamlit as st
from utils import load_vector_store, create_rag_chain, create_enhanced_rag_response, LANGUAGES
import time

# Set page configuration
st.set_page_config(
    page_title="Indian Legal Assistant",
    page_icon="‚öñÔ∏è",
    layout="wide"
)

# Force dark mode for better visibility
st.markdown("""
<script>
    var body = window.parent.document.querySelector('body');
    body.classList.add('dark');
</script>
""", unsafe_allow_html=True)

# Initialize session state for chat history and language
if "messages" not in st.session_state:
    st.session_state.messages = []
if "language" not in st.session_state:
    st.session_state.language = "English"

# Custom CSS for better styling with dark mode support
st.markdown("""
<style>
.main-header {
    font-family: 'Helvetica', sans-serif;
    text-align: center;
    color: #1E3A8A;
    padding: 1.5rem 0;
    border-bottom: 2px solid #E5E7EB;
    margin-bottom: 2rem;
    background-color: #F3F4F6;
    border-radius: 10px;
}
.description {
    text-align: center;
    margin-bottom: 2rem;
    font-size: 1.1rem;
    color: #4B5563;
}
.stChatMessage {
    padding: 1rem;
    border-radius: 15px;
    margin-bottom: 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
.stChatMessageContent {
    border-radius: 12px;
}
.user-message {
    background-color: #E9F2FF;
    color: #1F2937 !important; /* Dark text for light background */
}
.assistant-message {
    background-color: #F0FFF4;
    color: #1F2937 !important; /* Dark text for light background */
}
/* Dark mode specific styles */
@media (prefers-color-scheme: dark) {
    .main-header {
        color: #93C5FD;
        background-color: #1F2937;
        border-bottom: 2px solid #374151;
    }
    .description {
        color: #D1D5DB;
    }
    .user-message {
        background-color: #1E40AF;
        color: #F3F4F6 !important;
    }
    .assistant-message {
        background-color: #065F46;
        color: #F3F4F6 !important;
    }
    .sidebar-header {
        color: #93C5FD;
        border-bottom: 1px solid #374151;
    }
    .sidebar-content {
        color: #D1D5DB;
    }
    .disclaimer {
        background-color: #78350F;
        color: #FBBF24;
    }
}
.sidebar-header {
    font-size: 1.5rem;
    font-weight: bold;
    color: #1E3A8A;
    margin-bottom: 1rem;
    border-bottom: 1px solid #E5E7EB;
    padding-bottom: 0.5rem;
}
.sidebar-content {
    color: #4B5563;
    font-size: 0.95rem;
}
.disclaimer {
    background-color: #FEF3C7;
    padding: 1rem;
    border-radius: 8px;
    margin-top: 2rem;
    font-size: 0.9rem;
    color: #92400E;
}
</style>
""", unsafe_allow_html=True)

# Multilingual titles and descriptions
titles = {
    "English": "üáÆüá≥ Indian Legal Assistant",
    "Hindi": "üáÆüá≥ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§ï",
    "Bengali": "üáÆüá≥ ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶Ü‡¶á‡¶®‡¶ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï"
}

descriptions = {
    "English": "This chatbot provides guidance on Indian legal matters based on the Constitution of India, landmark Supreme Court cases, and other legal documents.",
    "Hindi": "‡§Ø‡§π ‡§ö‡•à‡§ü‡§¨‡•â‡§ü ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∏‡§Ç‡§µ‡§ø‡§ß‡§æ‡§®, ‡§∏‡•Å‡§™‡•ç‡§∞‡•Ä‡§Æ ‡§ï‡•ã‡§∞‡•ç‡§ü ‡§ï‡•á ‡§ê‡§§‡§ø‡§π‡§æ‡§∏‡§ø‡§ï ‡§Æ‡§æ‡§Æ‡§≤‡•ã‡§Ç ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡•ã‡§Ç ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§Æ‡§æ‡§Æ‡§≤‡•ã‡§Ç ‡§™‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§",
    "Bengali": "‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶∏‡¶Ç‡¶¨‡¶ø‡¶ß‡¶æ‡¶®, ‡¶∏‡ßÅ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶ê‡¶§‡¶ø‡¶π‡¶æ‡¶∏‡¶ø‡¶ï ‡¶Æ‡¶æ‡¶Æ‡¶≤‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶Ü‡¶á‡¶®‡¶ø ‡¶®‡¶•‡¶ø‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶§‡ßá ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶Ü‡¶á‡¶®‡¶ø ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§"
}

# App title and description
st.markdown(f'<div class="main-header"><h1>{titles.get(st.session_state.language, titles["English"])}</h1></div>', unsafe_allow_html=True)
st.markdown(f'<div class="description">{descriptions.get(st.session_state.language, descriptions["English"])}</div>', unsafe_allow_html=True)

# Language selector in sidebar
with st.sidebar:
    st.markdown('<div class="sidebar-header">Language / ‡§≠‡§æ‡§∑‡§æ / ‡¶≠‡¶æ‡¶∑‡¶æ</div>', unsafe_allow_html=True)
    selected_language = st.selectbox(
        "Choose your language:",
        options=list(LANGUAGES.keys()),
        format_func=lambda x: f"{LANGUAGES[x]} {x}",
        index=list(LANGUAGES.keys()).index(st.session_state.language)
    )
    
    # Update session state if language changed
    if selected_language != st.session_state.language:
        st.session_state.language = selected_language
        st.rerun()

# Load vector store and create retriever
@st.cache_resource
def load_retriever():
    try:
        vector_store = load_vector_store()
        retriever = vector_store.as_retriever(search_kwargs={"k": 5})
        return retriever
    except Exception as e:
        st.error(f"Error loading vector store: {e}")
        return None

retriever = load_retriever()

# Function to format chat history for the RAG chain
def format_chat_history(messages):
    chat_history = ""
    for msg in messages:
        role = "Human" if msg["role"] == "user" else "Assistant"
        chat_history += f"{role}: {msg['content']}\n\n"
    return chat_history

# Display chat messages with enhanced styling
for message in st.session_state.messages:
    role_class = "user-message" if message["role"] == "user" else "assistant-message"
    with st.chat_message(message["role"]):
        st.markdown(f"<div class='{role_class}' style='color: inherit;'>{message['content']}</div>", unsafe_allow_html=True)
        
        # Display references for assistant messages
        if message["role"] == "assistant" and "references" in message:
            references = message["references"]
            if references:
                reference_labels = {
                    "English": "üìö References",
                    "Hindi": "üìö ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠",
                    "Bengali": "üìö ‡¶§‡¶•‡ßç‡¶Ø‡¶∏‡ßÇ‡¶§‡ßç‡¶∞"
                }
                st.markdown(f"**{reference_labels.get(st.session_state.language, 'üìö References')}:**")
                
                for ref in references:
                    st.markdown(f"""
                    <div style="
                        border: 1px solid #e0e0e0;
                        border-radius: 8px;
                        padding: 12px;
                        margin: 8px 0;
                        background-color: #f8f9fa;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    ">
                        <div style="font-weight: bold; color: #1f2937; margin-bottom: 8px;">
                            üìñ {ref['document']}
                        </div>
                        <div style="color: #4b5563; font-size: 0.9em; line-height: 1.4;">
                            {ref['content']}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)

# Multilingual chat input placeholders
chat_placeholders = {
    "English": "Ask about Indian legal matters...",
    "Hindi": "‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§Æ‡§æ‡§Æ‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç...",
    "Bengali": "‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶Ü‡¶á‡¶®‡¶ø ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®..."
}

# Chat input
if prompt := st.chat_input(chat_placeholders.get(st.session_state.language, "Ask about Indian legal matters...")):
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})
    
    # Display user message
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # Generate response
    with st.chat_message("assistant"):
        if retriever is None:
            error_messages = {
                "English": "Vector store not found. Please run the ingest.py script first.",
                "Hindi": "‡§µ‡•á‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ingest.py ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§ö‡§≤‡§æ‡§è‡§Ç‡•§",
                "Bengali": "‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ingest.py ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡•§"
            }
            st.markdown(error_messages.get(st.session_state.language, "Vector store not found. Please run the ingest.py script first."))
        else:
            thinking_messages = {
        "English": "Thinking...",
        "Hindi": "‡§∏‡•ã‡§ö ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...",
        "Bengali": "‡¶≠‡¶æ‡¶¨‡¶õ‡¶ø..."
    }
    with st.spinner(thinking_messages.get(st.session_state.language, "Thinking...")):
                # Format chat history for context
                chat_history = format_chat_history(st.session_state.messages[:-1])  # Exclude current message
                
                try:
                    # Use enhanced RAG response with references
                    response = create_enhanced_rag_response(
                        retriever, 
                        prompt, 
                        chat_history, 
                        st.session_state.language
                    )
                    answer = response["answer"]
                    references = response["references"]
                    
                    # Create a placeholder for the typing animation
                    message_placeholder = st.empty()
                    full_response = ""
                    
                    # Simulate typing with a simple animation
                    for chunk in answer.split():
                        full_response += chunk + " "
                        message_placeholder.markdown(f"<div class='assistant-message' style='color: inherit;'>{full_response}‚ñå</div>", unsafe_allow_html=True)
                        time.sleep(0.05)  # Adjust speed as needed
                    
                    # Display the final answer
                    message_placeholder.markdown(f"<div class='assistant-message' style='color: inherit;'>{answer}</div>", unsafe_allow_html=True)
                    
                    # Display references in boxes
                    if references:
                        reference_labels = {
                            "English": "üìö References",
                            "Hindi": "üìö ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠",
                            "Bengali": "üìö ‡¶§‡¶•‡ßç‡¶Ø‡¶∏‡ßÇ‡¶§‡ßç‡¶∞"
                        }
                        st.markdown(f"**{reference_labels.get(st.session_state.language, 'üìö References')}:**")
                        
                        for i, ref in enumerate(references, 1):
                            with st.container():
                                st.markdown(f"""
                                <div style="
                                    border: 1px solid #e0e0e0;
                                    border-radius: 8px;
                                    padding: 12px;
                                    margin: 8px 0;
                                    background-color: #f8f9fa;
                                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                                ">
                                    <div style="font-weight: bold; color: #1f2937; margin-bottom: 8px;">
                                        üìñ {ref['document']}
                                    </div>
                                    <div style="color: #4b5563; font-size: 0.9em; line-height: 1.4;">
                                        {ref['content']}
                                    </div>
                                </div>
                                """, unsafe_allow_html=True)
                    
                    # Add assistant response to chat history
                    st.session_state.messages.append({"role": "assistant", "content": answer, "references": references})
                except Exception as e:
                    error_messages = {
                        "English": f"Error generating response: {e}",
                        "Hindi": f"‡§â‡§§‡•ç‡§§‡§∞ ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}",
                        "Bengali": f"‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}"
                    }
                    st.error(error_messages.get(st.session_state.language, f"Error generating response: {e}"))

# Sidebar with information and enhanced styling
with st.sidebar:
    st.markdown('<div class="sidebar-header">About</div>', unsafe_allow_html=True)
    about_content = {
        "English": "This legal assistant uses Retrieval-Augmented Generation (RAG) to provide accurate information about Indian law, drawing from:<br><br>‚Ä¢ <b>The Constitution of India</b><br>‚Ä¢ <b>Supreme Court landmark judgments</b><br>‚Ä¢ <b>High Court cases</b><br>‚Ä¢ <b>Legal precedents and statutes</b>",
        "Hindi": "‡§Ø‡§π ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§æ‡§®‡•Ç‡§® ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§ü‡•Ä‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ø‡§ü‡•ç‡§∞‡•Ä‡§µ‡§≤-‡§ë‡§ó‡§Æ‡•á‡§Ç‡§ü‡•á‡§° ‡§ú‡•á‡§®‡§∞‡•á‡§∂‡§® (RAG) ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à:<br><br>‚Ä¢ <b>‡§≠‡§æ‡§∞‡§§ ‡§ï‡§æ ‡§∏‡§Ç‡§µ‡§ø‡§ß‡§æ‡§®</b><br>‚Ä¢ <b>‡§∏‡•Å‡§™‡•ç‡§∞‡•Ä‡§Æ ‡§ï‡•ã‡§∞‡•ç‡§ü ‡§ï‡•á ‡§ê‡§§‡§ø‡§π‡§æ‡§∏‡§ø‡§ï ‡§´‡•à‡§∏‡§≤‡•á</b><br>‚Ä¢ <b>‡§π‡§æ‡§à ‡§ï‡•ã‡§∞‡•ç‡§ü ‡§ï‡•á ‡§Æ‡§æ‡§Æ‡§≤‡•á</b><br>‚Ä¢ <b>‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§Æ‡§ø‡§∏‡§æ‡§≤‡•á‡§Ç ‡§î‡§∞ ‡§ï‡§æ‡§®‡•Ç‡§®</b>",
        "Bengali": "‡¶è‡¶á ‡¶Ü‡¶á‡¶®‡¶ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶Ü‡¶á‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡ßÅ‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡¶ø‡¶ü‡ßç‡¶∞‡¶ø‡¶≠‡¶æ‡¶≤-‡¶Ö‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶° ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® (RAG) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá:<br><br>‚Ä¢ <b>‡¶≠‡¶æ‡¶∞‡¶§‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶¨‡¶ø‡¶ß‡¶æ‡¶®</b><br>‚Ä¢ <b>‡¶∏‡ßÅ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶ê‡¶§‡¶ø‡¶π‡¶æ‡¶∏‡¶ø‡¶ï ‡¶∞‡¶æ‡¶Ø‡¶º</b><br>‚Ä¢ <b>‡¶π‡¶æ‡¶á‡¶ï‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶Æ‡¶≤‡¶æ</b><br>‚Ä¢ <b>‡¶Ü‡¶á‡¶®‡¶ø ‡¶®‡¶ú‡¶ø‡¶∞ ‡¶ì ‡¶Ü‡¶á‡¶®</b>"
    }
    st.markdown(f'<div class="sidebar-content">{about_content.get(st.session_state.language, about_content["English"])}</div>', unsafe_allow_html=True)
    
    st.markdown('<div class="sidebar-header">Features</div>', unsafe_allow_html=True)
    features_content = {
        "English": "‚Ä¢ Answers questions about Indian law and legal rights<br>‚Ä¢ Provides information on legal procedures<br>‚Ä¢ Explains constitutional provisions<br>‚Ä¢ References relevant court cases<br>‚Ä¢ Maintains conversation context",
        "Hindi": "‚Ä¢ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§æ‡§®‡•Ç‡§® ‡§î‡§∞ ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§§‡§æ ‡§π‡•à<br>‚Ä¢ ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à<br>‚Ä¢ ‡§∏‡§Ç‡§µ‡•à‡§ß‡§æ‡§®‡§ø‡§ï ‡§™‡•ç‡§∞‡§æ‡§µ‡§ß‡§æ‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à<br>‚Ä¢ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§®‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§≤‡§Ø‡•Ä ‡§Æ‡§æ‡§Æ‡§≤‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§¶‡•á‡§§‡§æ ‡§π‡•à<br>‚Ä¢ ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡§æ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡§§‡§æ ‡§π‡•à",
        "Bengali": "‚Ä¢ ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶Ü‡¶á‡¶® ‡¶ì ‡¶Ü‡¶á‡¶®‡¶ø ‡¶Ö‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶Ø‡¶º<br>‚Ä¢ ‡¶Ü‡¶á‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá<br>‚Ä¢ ‡¶∏‡¶æ‡¶Ç‡¶¨‡¶ø‡¶ß‡¶æ‡¶®‡¶ø‡¶ï ‡¶¨‡¶ø‡¶ß‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßá<br>‚Ä¢ ‡¶™‡ßç‡¶∞‡¶æ‡¶∏‡¶ô‡ßç‡¶ó‡¶ø‡¶ï ‡¶Ü‡¶¶‡¶æ‡¶≤‡¶§‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶Æ‡¶≤‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶¶‡ßá‡¶Ø‡¶º<br>‚Ä¢ ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡¶ô‡ßç‡¶ó ‡¶¨‡¶ú‡¶æ‡¶Ø‡¶º ‡¶∞‡¶æ‡¶ñ‡ßá"
    }
    st.markdown(f'<div class="sidebar-content">{features_content.get(st.session_state.language, features_content["English"])}</div>', unsafe_allow_html=True)
    
    disclaimer_content = {
        "English": "‚ö†Ô∏è <b>Disclaimer:</b> This chatbot provides general legal information and not legal advice. Always consult with a qualified legal professional for specific legal matters.",
        "Hindi": "‚ö†Ô∏è <b>‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£:</b> ‡§Ø‡§π ‡§ö‡•à‡§ü‡§¨‡•â‡§ü ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§Æ‡§æ‡§Æ‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§",
        "Bengali": "‚ö†Ô∏è <b>‡¶¶‡¶æ‡¶¨‡¶ø‡¶§‡ßç‡¶Ø‡¶æ‡§ó:</b> ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶á‡¶®‡¶ø ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá, ‡¶Ü‡¶á‡¶®‡¶ø ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶®‡¶Ø‡¶º‡•§ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶Ü‡¶á‡¶®‡¶ø ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶Ü‡¶á‡¶®‡¶ø ‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    }
    st.markdown(f'<div class="disclaimer">{disclaimer_content.get(st.session_state.language, disclaimer_content["English"])}</div>', unsafe_allow_html=True)
    
    # Clear chat button with better styling
    col1, col2 = st.columns([1, 1])
    with col2:
        clear_button_text = {
            "English": "Clear Chat",
            "Hindi": "‡§ö‡•à‡§ü ‡§∏‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç",
            "Bengali": "‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶æ‡¶´ ‡¶ï‡¶∞‡ßÅ‡¶®"
        }
        if st.button(clear_button_text.get(st.session_state.language, "Clear Chat"), type="primary"):
            st.session_state.messages = []
            st.rerun()
    
    # Language info
    st.markdown('<div class="sidebar-header">Supported Languages</div>', unsafe_allow_html=True)
    st.markdown('<div class="sidebar-content">üá¨üáß English<br>üáÆüá≥ ‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)<br>üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ (Bengali)</div>', unsafe_allow_html=True)